type token =
  | COMMENT
  | NEWLINE
  | SEMI
  | OPENPAREN
  | CLOSEPAREN
  | OPENBLOCK
  | CLOSEBLOCK
  | COMMA
  | PREPEN
  | APPEND
  | ADD
  | MINUS
  | MULTIPLY
  | DIVIDE
  | ASSIGNMENT
  | EQUAL
  | NOTEQUAL
  | LT
  | LTOE
  | GT
  | GTOE
  | IF
  | ELSE
  | FOR
  | WHILE
  | INT
  | STRING
  | BOOLEAN
  | CARD
  | SET
  | PLAYER
  | UNTIL
  | BREAK
  | CONTINUE
  | HAS
  | CALLED
  | DO
  | WITH
  | NEW
  | CONFIG
  | LITERAL of (string)
  | NUMBER of (int)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 52 "parser.ml"
let yytransl_const = [|
  257 (* COMMENT *);
  258 (* NEWLINE *);
  259 (* SEMI *);
  260 (* OPENPAREN *);
  261 (* CLOSEPAREN *);
  262 (* OPENBLOCK *);
  263 (* CLOSEBLOCK *);
  264 (* COMMA *);
  265 (* PREPEN *);
  266 (* APPEND *);
  267 (* ADD *);
  268 (* MINUS *);
  269 (* MULTIPLY *);
  270 (* DIVIDE *);
  271 (* ASSIGNMENT *);
  272 (* EQUAL *);
  273 (* NOTEQUAL *);
  274 (* LT *);
  275 (* LTOE *);
  276 (* GT *);
  277 (* GTOE *);
  278 (* IF *);
  279 (* ELSE *);
  280 (* FOR *);
  281 (* WHILE *);
  282 (* INT *);
  283 (* STRING *);
  284 (* BOOLEAN *);
  285 (* CARD *);
  286 (* SET *);
  287 (* PLAYER *);
  288 (* UNTIL *);
  289 (* BREAK *);
  290 (* CONTINUE *);
  291 (* HAS *);
  292 (* CALLED *);
  293 (* DO *);
  294 (* WITH *);
  295 (* NEW *);
  296 (* CONFIG *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  297 (* LITERAL *);
  298 (* NUMBER *);
  299 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\003\000\003\000\007\000\007\000\004\000\
\004\000\008\000\008\000\008\000\009\000\009\000\010\000\010\000\
\005\000\005\000\002\000\011\000\013\000\013\000\013\000\013\000\
\013\000\013\000\006\000\006\000\015\000\015\000\014\000\014\000\
\014\000\014\000\016\000\016\000\017\000\017\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\018\000\
\018\000\019\000\019\000\000\000"

let yylen = "\002\000\
\000\000\002\000\002\000\006\000\004\000\000\000\001\000\001\000\
\003\000\002\000\002\000\002\000\000\000\001\000\001\000\003\000\
\000\000\002\000\002\000\004\000\001\000\003\000\005\000\007\000\
\001\000\001\000\000\000\002\000\004\000\002\000\009\000\005\000\
\005\000\005\000\001\000\003\000\000\000\001\000\001\000\001\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\004\000\003\000\001\000\001\000\000\000\
\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\001\000\000\000\000\000\000\000\000\000\002\000\003\000\019\000\
\017\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\
\018\000\000\000\010\000\011\000\012\000\017\000\000\000\000\000\
\000\000\000\000\000\000\000\000\054\000\055\000\000\000\039\000\
\000\000\000\000\028\000\025\000\026\000\000\000\009\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\053\000\022\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\043\000\044\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\052\000\000\000\033\000\000\000\023\000\000\000\032\000\000\000\
\000\000\000\000\000\000\000\000\024\000\000\000\000\000\031\000"

let yydgoto = "\002\000\
\003\000\017\000\007\000\015\000\011\000\018\000\000\000\016\000\
\000\000\000\000\000\000\034\000\035\000\036\000\037\000\088\000\
\065\000\069\000\070\000"

let yysindex = "\042\000\
\000\000\000\000\235\254\019\255\004\255\000\000\000\000\000\000\
\000\000\246\254\038\255\023\255\024\255\025\255\248\254\000\000\
\000\000\071\255\000\000\000\000\000\000\000\000\246\254\007\255\
\071\255\070\255\078\255\079\255\000\000\000\000\042\255\000\000\
\040\255\149\255\000\000\000\000\000\000\038\255\000\000\104\255\
\047\255\080\255\007\255\007\255\007\255\048\255\007\255\007\255\
\007\255\007\255\007\255\007\255\007\255\007\255\007\255\007\255\
\007\255\007\255\071\255\000\000\000\000\013\255\121\255\149\255\
\086\255\138\255\007\255\149\255\087\255\089\255\149\255\252\254\
\252\254\000\000\000\000\164\255\164\255\175\255\001\255\175\255\
\001\255\056\255\007\255\071\255\007\255\071\255\149\255\054\255\
\000\000\007\255\000\000\149\255\000\000\091\255\000\000\007\255\
\149\255\071\255\007\255\149\255\000\000\094\255\071\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\100\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\146\001\000\000\000\000\000\000\000\000\000\000\
\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\
\095\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\000\231\000\000\000\000\000\000\000\146\001\000\000\000\000\
\000\000\000\000\000\000\100\255\000\000\014\002\101\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\003\000\000\000\000\000\000\000\000\000\053\255\
\000\000\000\000\000\000\044\255\000\000\102\255\151\001\046\000\
\091\000\000\000\000\000\061\001\106\001\226\000\136\000\016\001\
\181\000\000\000\000\000\000\000\100\255\000\000\193\001\037\002\
\000\000\000\000\000\000\060\002\000\000\000\000\000\000\000\000\
\052\255\000\000\105\255\225\001\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\108\000\000\000\000\000\097\000\239\255\000\000\090\000\
\000\000\000\000\000\000\236\255\231\255\000\000\000\000\000\000\
\177\255\000\000\000\000"

let yytablesize = 871
let yytable = "\042\000\
\040\000\005\000\004\000\040\000\004\000\094\000\022\000\041\000\
\051\000\052\000\024\000\049\000\050\000\051\000\052\000\012\000\
\013\000\014\000\009\000\102\000\059\000\005\000\063\000\064\000\
\066\000\082\000\068\000\071\000\072\000\073\000\074\000\075\000\
\076\000\077\000\078\000\079\000\080\000\081\000\023\000\029\000\
\030\000\010\000\001\000\047\000\083\000\041\000\087\000\032\000\
\058\000\033\000\024\000\058\000\025\000\061\000\048\000\038\000\
\059\000\038\000\093\000\059\000\095\000\008\000\092\000\004\000\
\064\000\019\000\020\000\021\000\026\000\097\000\027\000\028\000\
\101\000\043\000\024\000\100\000\025\000\104\000\064\000\029\000\
\030\000\044\000\045\000\031\000\046\000\067\000\062\000\032\000\
\085\000\033\000\042\000\089\000\026\000\099\000\027\000\028\000\
\090\000\091\000\103\000\060\000\096\000\027\000\037\000\029\000\
\030\000\056\000\057\000\031\000\060\000\037\000\006\000\032\000\
\039\000\033\000\049\000\050\000\051\000\052\000\038\000\053\000\
\054\000\055\000\056\000\057\000\058\000\084\000\000\000\000\000\
\000\000\000\000\000\000\049\000\050\000\051\000\052\000\048\000\
\053\000\054\000\055\000\056\000\057\000\058\000\086\000\000\000\
\000\000\000\000\000\000\000\000\049\000\050\000\051\000\052\000\
\000\000\053\000\054\000\055\000\056\000\057\000\058\000\049\000\
\050\000\051\000\052\000\000\000\053\000\054\000\055\000\056\000\
\057\000\058\000\000\000\000\000\000\000\000\000\049\000\050\000\
\051\000\052\000\000\000\000\000\050\000\055\000\056\000\057\000\
\058\000\049\000\050\000\051\000\052\000\000\000\000\000\000\000\
\000\000\056\000\000\000\058\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\047\000\000\000\000\000\000\000\000\000\021\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\040\000\000\000\040\000\040\000\040\000\
\040\000\000\000\000\000\040\000\040\000\040\000\040\000\049\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\005\000\004\000\000\000\000\000\000\000\
\000\000\040\000\040\000\000\000\000\000\040\000\000\000\000\000\
\000\000\040\000\000\000\040\000\000\000\000\000\000\000\040\000\
\041\000\041\000\041\000\041\000\041\000\041\000\000\000\000\000\
\041\000\041\000\000\000\000\000\045\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\000\000\000\000\000\000\000\000\000\000\000\000\041\000\041\000\
\000\000\000\000\041\000\000\000\000\000\000\000\041\000\000\000\
\041\000\000\000\000\000\000\000\041\000\042\000\042\000\042\000\
\042\000\042\000\042\000\000\000\000\000\042\000\042\000\000\000\
\000\000\046\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\000\000\000\000\000\000\
\000\000\000\000\000\000\042\000\042\000\000\000\000\000\042\000\
\000\000\000\000\000\000\042\000\000\000\042\000\000\000\000\000\
\000\000\042\000\048\000\048\000\048\000\048\000\048\000\048\000\
\000\000\027\000\000\000\000\000\000\000\000\000\051\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\000\000\000\000\000\000\000\000\000\000\000\000\
\048\000\048\000\000\000\000\000\048\000\000\000\000\000\000\000\
\048\000\000\000\048\000\000\000\000\000\000\000\048\000\050\000\
\050\000\050\000\050\000\050\000\050\000\000\000\000\000\000\000\
\035\000\000\000\000\000\000\000\050\000\050\000\050\000\050\000\
\050\000\050\000\050\000\050\000\050\000\050\000\050\000\000\000\
\000\000\000\000\000\000\000\000\000\000\050\000\050\000\000\000\
\000\000\050\000\000\000\000\000\000\000\050\000\000\000\050\000\
\036\000\000\000\000\000\050\000\047\000\047\000\047\000\047\000\
\047\000\047\000\021\000\000\000\021\000\021\000\000\000\000\000\
\000\000\047\000\047\000\047\000\000\000\047\000\000\000\047\000\
\047\000\047\000\047\000\047\000\021\000\021\000\021\000\021\000\
\021\000\000\000\047\000\047\000\000\000\000\000\047\000\021\000\
\021\000\000\000\047\000\021\000\047\000\030\000\000\000\021\000\
\047\000\021\000\049\000\049\000\049\000\049\000\049\000\049\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\049\000\
\049\000\049\000\000\000\049\000\029\000\049\000\049\000\049\000\
\049\000\049\000\000\000\000\000\000\000\000\000\000\000\000\000\
\049\000\049\000\000\000\000\000\049\000\000\000\000\000\000\000\
\049\000\000\000\049\000\034\000\000\000\000\000\049\000\045\000\
\045\000\045\000\045\000\045\000\045\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\045\000\045\000\000\000\000\000\
\000\000\000\000\045\000\045\000\045\000\045\000\045\000\000\000\
\000\000\000\000\000\000\000\000\000\000\045\000\045\000\000\000\
\000\000\045\000\000\000\000\000\000\000\045\000\000\000\045\000\
\000\000\000\000\000\000\045\000\046\000\046\000\046\000\046\000\
\046\000\046\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\046\000\046\000\000\000\000\000\000\000\000\000\046\000\
\046\000\046\000\046\000\046\000\000\000\000\000\000\000\000\000\
\000\000\000\000\046\000\046\000\000\000\000\000\046\000\000\000\
\000\000\000\000\046\000\000\000\046\000\027\000\000\000\027\000\
\046\000\051\000\051\000\051\000\051\000\051\000\051\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\027\000\
\000\000\027\000\027\000\000\000\051\000\051\000\051\000\051\000\
\051\000\000\000\027\000\027\000\000\000\000\000\027\000\051\000\
\051\000\000\000\027\000\051\000\027\000\000\000\000\000\051\000\
\000\000\051\000\000\000\000\000\035\000\051\000\035\000\035\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\035\000\035\000\
\035\000\035\000\035\000\000\000\000\000\000\000\000\000\000\000\
\000\000\035\000\035\000\000\000\036\000\035\000\036\000\036\000\
\000\000\035\000\000\000\035\000\000\000\000\000\000\000\035\000\
\000\000\000\000\000\000\000\000\000\000\000\000\036\000\036\000\
\036\000\036\000\036\000\000\000\000\000\000\000\000\000\000\000\
\000\000\036\000\036\000\000\000\000\000\036\000\000\000\000\000\
\000\000\036\000\000\000\036\000\000\000\000\000\000\000\036\000\
\000\000\030\000\000\000\030\000\030\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\030\000\030\000\030\000\030\000\030\000\
\029\000\000\000\029\000\029\000\000\000\000\000\030\000\030\000\
\000\000\000\000\030\000\000\000\000\000\000\000\030\000\000\000\
\030\000\000\000\029\000\029\000\029\000\029\000\029\000\034\000\
\000\000\034\000\034\000\000\000\000\000\029\000\029\000\000\000\
\000\000\029\000\000\000\000\000\000\000\029\000\000\000\029\000\
\000\000\034\000\034\000\034\000\034\000\034\000\000\000\000\000\
\000\000\000\000\000\000\000\000\034\000\034\000\000\000\000\000\
\034\000\000\000\000\000\000\000\034\000\000\000\034\000"

let yycheck = "\025\000\
\000\000\000\000\000\000\024\000\026\001\085\000\015\001\025\000\
\013\001\014\001\004\001\011\001\012\001\013\001\014\001\026\001\
\027\001\028\001\015\001\099\000\038\000\043\001\043\000\044\000\
\045\000\013\001\047\000\048\000\049\000\050\000\051\000\052\000\
\053\000\054\000\055\000\056\000\057\000\058\000\047\001\033\001\
\034\001\038\001\001\000\004\001\032\001\000\000\067\000\041\001\
\005\001\043\001\004\001\008\001\006\001\007\001\015\001\003\001\
\005\001\005\001\084\000\008\001\086\000\043\001\083\000\026\001\
\085\000\043\001\043\001\043\001\022\001\090\000\024\001\025\001\
\098\000\004\001\004\001\096\000\006\001\103\000\099\000\033\001\
\034\001\004\001\004\001\037\001\043\001\038\001\007\001\041\001\
\003\001\043\001\000\000\005\001\022\001\003\001\024\001\025\001\
\008\001\042\001\005\001\000\000\047\001\007\001\003\001\033\001\
\034\001\005\001\005\001\037\001\005\001\005\001\003\000\041\001\
\023\000\043\001\011\001\012\001\013\001\014\001\022\000\016\001\
\017\001\018\001\019\001\020\001\021\001\005\001\255\255\255\255\
\255\255\255\255\255\255\011\001\012\001\013\001\014\001\000\000\
\016\001\017\001\018\001\019\001\020\001\021\001\005\001\255\255\
\255\255\255\255\255\255\255\255\011\001\012\001\013\001\014\001\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001\011\001\
\012\001\013\001\014\001\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\255\255\255\255\255\255\255\255\011\001\012\001\
\013\001\014\001\255\255\255\255\000\000\018\001\019\001\020\001\
\021\001\011\001\012\001\013\001\014\001\255\255\255\255\255\255\
\255\255\019\001\255\255\021\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\003\001\255\255\005\001\006\001\007\001\
\008\001\255\255\255\255\011\001\012\001\013\001\014\001\000\000\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\026\001\026\001\255\255\255\255\255\255\
\255\255\033\001\034\001\255\255\255\255\037\001\255\255\255\255\
\255\255\041\001\255\255\043\001\255\255\255\255\255\255\047\001\
\003\001\004\001\005\001\006\001\007\001\008\001\255\255\255\255\
\011\001\012\001\255\255\255\255\000\000\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\255\255\255\255\255\255\255\255\255\255\255\255\033\001\034\001\
\255\255\255\255\037\001\255\255\255\255\255\255\041\001\255\255\
\043\001\255\255\255\255\255\255\047\001\003\001\004\001\005\001\
\006\001\007\001\008\001\255\255\255\255\011\001\012\001\255\255\
\255\255\000\000\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\255\255\255\255\255\255\
\255\255\255\255\255\255\033\001\034\001\255\255\255\255\037\001\
\255\255\255\255\255\255\041\001\255\255\043\001\255\255\255\255\
\255\255\047\001\003\001\004\001\005\001\006\001\007\001\008\001\
\255\255\000\000\255\255\255\255\255\255\255\255\000\000\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\255\255\255\255\255\255\255\255\255\255\255\255\
\033\001\034\001\255\255\255\255\037\001\255\255\255\255\255\255\
\041\001\255\255\043\001\255\255\255\255\255\255\047\001\003\001\
\004\001\005\001\006\001\007\001\008\001\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\255\255\
\255\255\255\255\255\255\255\255\255\255\033\001\034\001\255\255\
\255\255\037\001\255\255\255\255\255\255\041\001\255\255\043\001\
\000\000\255\255\255\255\047\001\003\001\004\001\005\001\006\001\
\007\001\008\001\004\001\255\255\006\001\007\001\255\255\255\255\
\255\255\016\001\017\001\018\001\255\255\020\001\255\255\022\001\
\023\001\024\001\025\001\026\001\022\001\023\001\024\001\025\001\
\026\001\255\255\033\001\034\001\255\255\255\255\037\001\033\001\
\034\001\255\255\041\001\037\001\043\001\000\000\255\255\041\001\
\047\001\043\001\003\001\004\001\005\001\006\001\007\001\008\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\016\001\
\017\001\018\001\255\255\020\001\000\000\022\001\023\001\024\001\
\025\001\026\001\255\255\255\255\255\255\255\255\255\255\255\255\
\033\001\034\001\255\255\255\255\037\001\255\255\255\255\255\255\
\041\001\255\255\043\001\000\000\255\255\255\255\047\001\003\001\
\004\001\005\001\006\001\007\001\008\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\016\001\017\001\255\255\255\255\
\255\255\255\255\022\001\023\001\024\001\025\001\026\001\255\255\
\255\255\255\255\255\255\255\255\255\255\033\001\034\001\255\255\
\255\255\037\001\255\255\255\255\255\255\041\001\255\255\043\001\
\255\255\255\255\255\255\047\001\003\001\004\001\005\001\006\001\
\007\001\008\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\016\001\017\001\255\255\255\255\255\255\255\255\022\001\
\023\001\024\001\025\001\026\001\255\255\255\255\255\255\255\255\
\255\255\255\255\033\001\034\001\255\255\255\255\037\001\255\255\
\255\255\255\255\041\001\255\255\043\001\004\001\255\255\006\001\
\047\001\003\001\004\001\005\001\006\001\007\001\008\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\022\001\
\255\255\024\001\025\001\255\255\022\001\023\001\024\001\025\001\
\026\001\255\255\033\001\034\001\255\255\255\255\037\001\033\001\
\034\001\255\255\041\001\037\001\043\001\255\255\255\255\041\001\
\255\255\043\001\255\255\255\255\004\001\047\001\006\001\007\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\255\255\255\255\255\255\255\255\255\255\
\255\255\033\001\034\001\255\255\004\001\037\001\006\001\007\001\
\255\255\041\001\255\255\043\001\255\255\255\255\255\255\047\001\
\255\255\255\255\255\255\255\255\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\255\255\255\255\255\255\255\255\255\255\
\255\255\033\001\034\001\255\255\255\255\037\001\255\255\255\255\
\255\255\041\001\255\255\043\001\255\255\255\255\255\255\047\001\
\255\255\004\001\255\255\006\001\007\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\022\001\023\001\024\001\025\001\026\001\
\004\001\255\255\006\001\007\001\255\255\255\255\033\001\034\001\
\255\255\255\255\037\001\255\255\255\255\255\255\041\001\255\255\
\043\001\255\255\022\001\023\001\024\001\025\001\026\001\004\001\
\255\255\006\001\007\001\255\255\255\255\033\001\034\001\255\255\
\255\255\037\001\255\255\255\255\255\255\041\001\255\255\043\001\
\255\255\022\001\023\001\024\001\025\001\026\001\255\255\255\255\
\255\255\255\255\255\255\255\255\033\001\034\001\255\255\255\255\
\037\001\255\255\255\255\255\255\041\001\255\255\043\001"

let yynames_const = "\
  COMMENT\000\
  NEWLINE\000\
  SEMI\000\
  OPENPAREN\000\
  CLOSEPAREN\000\
  OPENBLOCK\000\
  CLOSEBLOCK\000\
  COMMA\000\
  PREPEN\000\
  APPEND\000\
  ADD\000\
  MINUS\000\
  MULTIPLY\000\
  DIVIDE\000\
  ASSIGNMENT\000\
  EQUAL\000\
  NOTEQUAL\000\
  LT\000\
  LTOE\000\
  GT\000\
  GTOE\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  INT\000\
  STRING\000\
  BOOLEAN\000\
  CARD\000\
  SET\000\
  PLAYER\000\
  UNTIL\000\
  BREAK\000\
  CONTINUE\000\
  HAS\000\
  CALLED\000\
  DO\000\
  WITH\000\
  NEW\000\
  CONFIG\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  NUMBER\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 33 "parser.mly"
                 ( [], [] )
# 457 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 34 "parser.mly"
                 ( (_2 :: fst _1), snd _1 )
# 465 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 35 "parser.mly"
                 ( fst _1, (_2 :: snd _1) )
# 473 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'arg_list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 39 "parser.mly"
   ( { 
      fname = _1;
      formals = _3;
      locals = List.rev _5;
      body = List.rev _6
    } )
# 488 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 46 "parser.mly"
  ( {
     fname = _1;
     formals = [];
     locals = List.rev _3;
     body = List.rev _4
  } )
# 502 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 54 "parser.mly"
                 ( [] )
# 508 "parser.ml"
               : 'arg_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arg_list) in
    Obj.repr(
# 55 "parser.mly"
             ( List.rev _1)
# 515 "parser.ml"
               : 'arg_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arg) in
    Obj.repr(
# 58 "parser.mly"
      ( [_1] )
# 522 "parser.ml"
               : 'arg_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arg_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arg) in
    Obj.repr(
# 59 "parser.mly"
                     ( _3 :: _1)
# 530 "parser.ml"
               : 'arg_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 62 "parser.mly"
        ( [ _2 ] )
# 537 "parser.ml"
               : 'arg))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 63 "parser.mly"
             ( [ _2 ] )
# 544 "parser.ml"
               : 'arg))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 64 "parser.mly"
              ( [ _2 ] )
# 551 "parser.ml"
               : 'arg))
; (fun __caml_parser_env ->
    Obj.repr(
# 67 "parser.mly"
                  ( [] )
# 557 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 68 "parser.mly"
                  ( List.rev _1 )
# 564 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 71 "parser.mly"
                         ( [_1] )
# 571 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 72 "parser.mly"
                         ( _3 :: _1 )
# 579 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 75 "parser.mly"
                     ( [] )
# 585 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 76 "parser.mly"
                     ( _2 :: _1 )
# 593 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 79 "parser.mly"
         ( _2 )
# 600 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 82 "parser.mly"
                            (Config(_2,_4))
# 608 "parser.ml"
               : 'condecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 85 "parser.mly"
         ( Expr(_1) )
# 615 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 86 "parser.mly"
                                   ( Block(List.rev _2) )
# 622 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 87 "parser.mly"
                                                   ( If(_3, _5, Block([])) )
# 630 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 88 "parser.mly"
                                                   ( If(_3, _5, _7) )
# 639 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'loop_block) in
    Obj.repr(
# 89 "parser.mly"
               (_1)
# 646 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'do_block) in
    Obj.repr(
# 90 "parser.mly"
             (_1)
# 653 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 93 "parser.mly"
                   ( [] )
# 659 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 94 "parser.mly"
                   ( _2 :: _1 )
# 667 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr_list) in
    Obj.repr(
# 97 "parser.mly"
                      ({ 
                    fname = _2;
                    formals = List.rev _4
                  })
# 678 "parser.ml"
               : 'do_block))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 101 "parser.mly"
          ({
            fname = _2;
            formal = [] 
          })
# 688 "parser.ml"
               : 'do_block))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 108 "parser.mly"
     ( For(_3, _5, _7, _9) )
# 698 "parser.ml"
               : 'loop_block))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 109 "parser.mly"
                                         ( While(_3, _5) )
# 706 "parser.ml"
               : 'loop_block))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'stmt) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 110 "parser.mly"
                                              ( SimpLoop( _2, _5) )
# 714 "parser.ml"
               : 'loop_block))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'stmt) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                                         ( Until( _2, _5 ) )
# 722 "parser.ml"
               : 'loop_block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
       ( [_1] )
# 729 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                       ( _3 :: _1 )
# 737 "parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 119 "parser.mly"
                  ( Noexpr )
# 743 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                  ( _1 )
# 750 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 123 "parser.mly"
                     ( Literal(_1) )
# 757 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 124 "parser.mly"
                     ( Id(_1) )
# 764 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                    ( Binop(_1, Add,   _3) )
# 772 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                     ( Binop(_1, Sub,   _3) )
# 780 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                        ( Binop(_1, Mult,  _3) )
# 788 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                     ( Binop(_1, Div,   _3) )
# 796 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                        ( Binop(_1, Equal, _3) )
# 804 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                        ( Binop(_1, Neq,   _3) )
# 812 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                     ( Binop(_1, Less,  _3) )
# 820 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                      ( Binop(_1, Leq,   _3) )
# 828 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
                     ( Binop(_1, Greater,  _3) )
# 836 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                      ( Binop(_1, Geq,   _3) )
# 844 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 135 "parser.mly"
                         ( Assignment(_1, _3) )
# 852 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 136 "parser.mly"
                                        ( Call(_1, _3) )
# 860 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 137 "parser.mly"
                              ( _2 )
# 867 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 138 "parser.mly"
          ( Noexpr )
# 873 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 139 "parser.mly"
             ( Noexpr )
# 879 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 142 "parser.mly"
                  ( [] )
# 885 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 143 "parser.mly"
                  ( List.rev _1 )
# 892 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 146 "parser.mly"
                            ( [_1] )
# 899 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 147 "parser.mly"
                            ( _3 :: _1 )
# 907 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
